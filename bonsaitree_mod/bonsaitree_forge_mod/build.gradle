// 应用基础插件
plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
}

// 配置插件仓库（关键：在使用插件前声明仓库）
buildscript {
    repositories {
        gradlePluginPortal()
        maven { url = "https://maven.minecraftforge.net/" }
        maven { url = "https://maven.parchmentmc.org" }
    }
    dependencies {
        // 指定 ForgeGradle 版本
        classpath 'net.minecraftforge.gradle:ForgeGradle:7.2.0'
    }
}

// 应用 ForgeGradle 插件（使用旧语法确保兼容性）
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

// Gradle Wrapper 配置
wrapper {
    gradleVersion = "8.4"
    distributionType = Wrapper.DistributionType.BIN
}

// 项目基本信息
version = '1.0'
group = 'com.yourmod.bonsaitree'
archivesBaseName = 'bonsaitree'

// Java 版本配置
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// 打印系统信息（调试用）
println "Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}"

// Minecraft 模组配置
minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // 运行配置
    runs {
        common {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'bonsaitree'
            mods {
                bonsaitree {
                    source sourceSets.main
                }
            }
        }

        client {
            extendsFrom common
        }

        server {
            extendsFrom common
        }

        gameTestServer {
            extendsFrom common
        }

        data {
            extendsFrom common
            args '--mod', 'bonsaitree', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// 资源目录配置
sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources', 'src/generated/resources']
            include '**/*'
        }
    }
}

// 依赖仓库
repositories {
    mavenCentral()
    maven { url = "https://maven.minecraftforge.net/" }
    maven { url = "https://cursemaven.com" }
    maven { url = "https://maven.parchmentmc.org" }
}

// 项目依赖
dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.3.22'
}

// JAR 打包配置
jar {
    manifest {
        attributes(
            "Specification-Title": "bonsaitree",
            "Specification-Vendor": "YourName",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": "YourName",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
}

// 混淆处理
tasks.jar.finalizedBy('reobfJar')

// 发布配置
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url = "file://${projectDir}/../mcmodsrepo"
        }
    }
}

// 编码配置
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// 确保 pack.mcmeta 存在
task checkPackMcmeta {
    doLast {
        def packMcmeta = file('src/main/resources/pack.mcmeta')
        if (!packMcmeta.exists()) {
            throw new GradleException("Missing pack.mcmeta file!")
        }
        println "✅ pack.mcmeta found"
    }
}

// 构建前检查 pack.mcmeta
tasks.processResources.dependsOn(checkPackMcmeta)
