// 关键：buildscript 必须放在所有 plugins 之前
buildscript {
    repositories {
        maven { url = "https://maven.minecraftforge.net/" }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:6.0.14'
    }
}

// 所有 plugins 代码块必须在 buildscript 之后
plugins {
    id 'java'
    id 'eclipse'
}

// 应用 Forge 插件
apply plugin: 'net.minecraftforge.gradle'

// 项目信息
version = '1.0.0'
group = 'com.yourmod.bonsaitree'
description = 'Bonsai Tree Mod for Minecraft 1.20.1'

// Java 配置
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Minecraft 核心配置
minecraft {
    mappings channel: 'srg', version: '1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            vmArgs = ['-Xmx4G']
            mods {
                bonsaitree {
                    source sourceSets.main
                }
            }
        }
    }
}

// 仓库与依赖
repositories {
    maven { url = "https://maven.minecraftforge.net/" }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.1.0'
}

// 打包配置
jar {
    archiveBaseName.set('bonsaitree')
    archiveVersion.set(project.version)
    manifest {
        attributes(
            'Built-By': System.getProperty('user.name'),
            'Build-Jdk': System.getProperty('java.version')
        )
    }
    finalizedBy 'reobfJar'
}

// 清理任务
task cleanAll(type: Delete) {
    delete rootProject.buildDir
    delete rootProject.file('.gradle')
    description = '彻底清理构建缓存和输出'
}

// 构建结果提示
gradle.buildFinished { result ->
    if (result.success) {
        println "\n✅ 构建成功！模组位置：${project.buildDir}/libs/"
    } else {
        println "\n❌ 构建失败，请运行 ./gradlew cleanAll 后重试"
    }
}
