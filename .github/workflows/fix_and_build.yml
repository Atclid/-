name: 构建 Minecraft 模组
on:
  push:
    paths:
      - 'bonsaitree_mod/bonsaitree_forge_mod/**'
  workflow_dispatch:
    inputs:
      debugMode:
        type: boolean
        description: '启用调试模式'
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 验证模组目录
        run: |
          MOD_DIR="bonsaitree_mod/bonsaitree_forge_mod"
          if [ ! -d "$MOD_DIR" ]; then
            echo "❌ 模组目录不存在: $MOD_DIR"
            exit 1
          fi
          echo "mod_dir=$MOD_DIR" >> $GITHUB_ENV
          echo "📂 模组目录内容:"
          ls -la $MOD_DIR

      - name: 检查并补全 settings.gradle
        working-directory: ${{ env.mod_dir }}
        run: |
          if [ ! -f "settings.gradle" ]; then
            echo "⚠️ 生成 settings.gradle"
            cat << EOF > settings.gradle
          pluginManagement {
              repositories {
                  maven { url "https://maven.minecraftforge.net/" }
                  gradlePluginPortal()
                  maven { url "https://maven.parchmentmc.org/" }
              }
          }
          rootProject.name = "bonsaitree_forge_mod"
          EOF
          else
            echo "✅ settings.gradle 已存在"
          fi

      - name: 验证 plugins 块位置
        working-directory: ${{ env.mod_dir }}
        run: |
          echo "🔍 检查 plugins 块是否存在..."
          if ! grep -q "^plugins *{" build.gradle; then
            echo "❌ build.gradle 中未找到 plugins 块"
            exit 1
          fi
          echo "✅ plugins 块存在"

      - name: 配置 JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: 缓存 Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 生成完整的 Gradle Wrapper
        working-directory: ${{ env.mod_dir }}
        run: |
          # 创建必要的目录结构
          mkdir -p gradle/wrapper
          
          # 确保 Gradle Wrapper 文件存在且正确
          if [ ! -f "gradlew" ]; then
            echo "⚠️ 生成 Gradle Wrapper 脚本"
            cat << 'EOF' > gradlew
#!/usr/bin/env bash
set -e
[ -f "$HOME/.sdkman/bin/sdkman-init.sh" ] && source "$HOME/.sdkman/bin/sdkman-init.sh"
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
exec java -Dorg.gradle.appname=gradlew -classpath "$DIR/gradle/wrapper/gradle-wrapper.jar" org.gradle.wrapper.GradleWrapperMain "$@"
EOF
            chmod +x gradlew
          fi
          
          if [ ! -f "gradle/wrapper/gradle-wrapper.properties" ]; then
            echo "⚠️ 生成 gradle-wrapper.properties"
            cat << 'EOF' > gradle/wrapper/gradle-wrapper.properties
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
EOF
          fi
          
          # 下载 gradle-wrapper.jar（如果不存在）
          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "⚠️ 下载 gradle-wrapper.jar"
            wget -q -O gradle/wrapper/gradle-wrapper.jar https://repo.gradle.org/gradle/libs-releases-local/org/gradle/wrapper/gradle-wrapper/8.4/gradle-wrapper-8.4.jar
          fi
          
          # 验证 Gradle Wrapper 文件
          echo "✅ Gradle Wrapper 文件状态:"
          ls -la gradle/wrapper
          cat gradle/wrapper/gradle-wrapper.properties

      - name: 构建模组
        working-directory: ${{ env.mod_dir }}
        run: |
          echo "🚀 开始构建..."
          if ${{ github.event.inputs.debugMode }}; then
            echo "🐞 调试模式: 启用详细输出"
            ./gradlew build --stacktrace --info --no-daemon
          else
            ./gradlew build --no-daemon
          fi
          echo "→ 构建产物:"
          ls -la build/libs/

      - name: 检查构建结果
        working-directory: ${{ env.mod_dir }}
        run: |
          if [ ! -d "build/libs" ] || [ -z "$(ls -A build/libs)" ]; then
            echo "❌ 构建失败: 未生成模组 JAR 文件"
            exit 1
          else
            echo "✅ 构建成功"
          fi

      - name: 提交补全的文件
        if: success()
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add ${{ env.mod_dir }}/settings.gradle
          git add ${{ env.mod_dir }}/gradlew
          git add ${{ env.mod_dir }}/gradlew.bat
          git add ${{ env.mod_dir }}/gradle/wrapper/
          if [[ $(git status --porcelain) ]]; then
            git commit -m "自动补全配置文件"
            git push
            echo "✅ 已提交补全的文件"
          else
            echo "⚠️ 无文件变更"
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: bonsaitree-mod
          path: ${{ env.mod_dir }}/build/libs/*.jar
          if-no-files-found: error
