name: 构建 Minecraft 模组
on:
  push:
    paths:
      - 'bonsaitree_mod/bonsaitree_forge_mod/**'
  workflow_dispatch:  # 保留手动触发按钮，沿用成功版本的简洁配置

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取完整历史，确保提交功能正常

      - name: 验证模组目录
        run: |
          MOD_DIR="bonsaitree_mod/bonsaitree_forge_mod"
          if [ ! -d "$MOD_DIR" ]; then
            echo "❌ 模组目录不存在: $MOD_DIR"
            exit 1
          fi
          echo "mod_dir=$MOD_DIR" >> $GITHUB_ENV
          echo "📂 模组目录内容:"
          ls -la $MOD_DIR  # 输出目录内容，便于调试

      - name: 检查并补全 settings.gradle
        working-directory: ${{ env.mod_dir }}
        run: |
          if [ ! -f "settings.gradle" ]; then
            echo "⚠️ 生成 settings.gradle"
            cat << EOF > settings.gradle
          pluginManagement {
              repositories {
                  maven { url "https://maven.minecraftforge.net/" }
                  gradlePluginPortal()
                  maven { url "https://maven.parchmentmc.org/" }
              }
          }
          rootProject.name = "bonsaitree_forge_mod"
          EOF
          else
            echo "✅ settings.gradle 已存在"
          fi

      - name: 验证 plugins 块位置
        working-directory: ${{ env.mod_dir }}
        run: |
          echo "🔍 检查 plugins 块是否存在..."
          if ! grep -q "^plugins *{" build.gradle; then
            echo "❌ build.gradle 中未找到 plugins 块"
            exit 1
          fi
          echo "✅ plugins 块存在"

      - name: 配置 JDK 17  # 关键：先安装Java，再生成Gradle Wrapper（依赖Java）
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'  # 启用缓存，加速构建

      - name: 生成/验证 Gradle Wrapper  # 沿用你成功过的方法，稳定可靠
        working-directory: ${{ env.mod_dir }}
        run: |
          if [ ! -f "gradlew" ]; then
            echo "⚠️ 生成 Gradle Wrapper..."
            # 下载Gradle 8.4二进制包（与你成功版本一致）
            wget -q https://services.gradle.org/distributions/gradle-8.4-bin.zip
            # 解压（静默模式，避免输出冗余信息）
            unzip -q gradle-8.4-bin.zip
            # 用解压后的Gradle生成Wrapper（确保使用当前安装的Java）
            ./gradle-8.4/bin/gradle wrapper --gradle-version=8.4
            # 清理临时文件
            rm -rf gradle-8.4 gradle-8.4-bin.zip
            # 确保执行权限（关键：避免"权限不足"错误）
            chmod +x gradlew
          else
            echo "✅ Gradle Wrapper 已存在"
          fi
          # 验证生成的文件（关键：确认核心文件存在）
          echo "🔍 验证 Gradle Wrapper 文件:"
          ls -la gradle/wrapper
          if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "❌ 缺失关键文件 gradle-wrapper.jar"
            exit 1
          fi

      - name: 构建模组
        working-directory: ${{ env.mod_dir }}
        run: |
          echo "🚀 开始构建..."
          # 增加超时控制和详细输出（失败时便于调试）
          ./gradlew build --no-daemon --stacktrace
          echo "→ 构建产物:"
          ls -la build/libs/  # 输出产物列表，确认生成JAR

      - name: 提交补全的文件
        if: success()
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add ${{ env.mod_dir }}/settings.gradle
          git add ${{ env.mod_dir }}/gradlew
          git add ${{ env.mod_dir }}/gradlew.bat
          git add ${{ env.mod_dir }}/gradle/wrapper/
          # 仅在有变更时提交（避免空提交）
          if [[ $(git status --porcelain) ]]; then
            git commit -m "自动补全Gradle配置文件"
            git push
            echo "✅ 已提交补全的文件"
          else
            echo "⚠️ 无文件变更，无需提交"
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: bonsaitree-mod
          path: ${{ env.mod_dir }}/build/libs/*.jar
          if-no-files-found: error  # 产物缺失时直接报错
